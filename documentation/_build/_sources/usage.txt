===============================
**Keywords - YAML/JSON**
===============================


**Resource Index**
##########################

* `Auto Scaling Group`_
* `CloudWatch`_
* `Instances`_
* `Launch Configuration`_
* `Lifecycle Hooks`_
* `Load Balancer`_
* `Network Interface`_
* `Network Interface Attachment`_
* `RDS`_
* `Sns Topic`_
* `Volume`_
* `Other Required Keywords`_

Following is the documentation of keywords required to add the following resources in your yaml file.


.. _Auto Scaling Group:

**Auto Scaling Group**
=======================

The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group resource for your stack.

JSON Syntax for auto scaling group.


.. code-block:: javascript

    "Type" : "AWS::AutoScaling::AutoScalingGroup",
    "Properties" : {
        "AvailabilityZones" : [ String, ... ],
        "Cooldown" : String,
        "DesiredCapacity" : String,
        "HealthCheckGracePeriod" : Integer,
        "HealthCheckType" : String,
        "InstanceId" : String,
        "LaunchConfigurationName" : String,
        "LoadBalancerNames" : [ String, ... ],
        "MaxSize" : String,
        "MetricsCollection" : [ MetricsCollection, ... ]
        "MinSize" : String,
        "NotificationConfigurations" : [ NotificationConfigurations, ... ],
        "PlacementGroup" : String,
        "Tags" : [ Auto Scaling Tag, ..., ],
        "TerminationPolicies" : [ String, ..., ],
        "VPCZoneIdentifier" : [ String, ... ]
    }


Sample YAML Syntax for Auto Scaling Group.

.. code-block:: yaml

    auto_scale_groups:
        *AutoScalingName*:
              hostname: sampleTestName
              availability_zones:
                  - AZName1
                  - AZName2
              min_size: 1
              max_size: 10
              desired_capacity: 10
              instance_id: ami-xxxxxxxx
              cooldown: 10
              launch_configuration: LaunchConfigName
              load_balancer_names:
                  - LBName
                  - ref(Sample_LB)
              max_size: 2
              min_size: 1
              metrics_collection:
                  - granularity: 1Minute
                  - granularity: 1Minute
                    metrics:
                        - Metric1
                        - Metric2
              notification_configs:
                  - notification_type:
                        - Type1
                        - Type2
                    topic_arn: "arn:aws:[service]:[region]:[account]:resourceType/resourcePath"
                  - notification_type:
                        - Type3
                    topic_arn: "arn:aws:[service]:[region]:[account]:resourceType/resourcePath"
              placement_group: PlacementGroupName
              tags:
                  - key: Key1
                    value: Value1
                    propagate_at_launch: true
                  - key: Key2
                    value: Value2
                    propagate_at_launch: false
              termination_policies:
                  - Policy1
                  - Policy2
              vpc_zone_identifier:
                  - ZoneIdentifier1
                  - ZoneIdentifier2


.. _CloudWatch:

**CloudWatch**
================

Respawn supports CloudWatch for AutoScaling/EC2 instances. The AWS::CloudWatch::Alarm type creates a CloudWatch alarm.

JSON syntax for the resource CloudWatch.

.. code-block:: javascript

   "Type" : "AWS::CloudWatch::Alarm",
   "Properties" : {
      "ActionsEnabled" : Boolean,
      "AlarmActions" : [ String, ... ],
      "AlarmDescription" : String,
      "AlarmName" : String,
      "ComparisonOperator" : String,
      "Dimensions" : [ Metric dimension, ... ],
      "EvaluationPeriods" : String,
      "InsufficientDataActions" : [ String, ... ],
      "MetricName" : String,
      "Namespace" : String,
      "OKActions" : [ String, ... ],
      "Period" : String,
      "Statistic" : String,
      "Threshold" : String,
      "Unit" : String
   }


Sample YAML syntax for the resource CloudWatch.

.. code-block:: yaml

   cloud_watch:
      *CloudWatchName*:
        actions_enabled: true
        alarm_actions:
          - AlarmAction1
          - AlarmAction2
        alarm_name: SampleAlarm
        alarm_description: "Sample alarm description"
        comparison_operator: GreaterThanOrEqualToThreshold
        dimensions:
          - name: Dimension1
            value: Value1
          - name: Dimension2
            value: Value2
        evaluation_periods: 15
        insufficient_data_actions:
          - InsufficientDataAction1
          - InsufficientDataAction2
        metric_name : SampleName
        namespace : SampleNamespace
        ok_actions :
          - OkAction1
          - OkAction2
        period : 12
        statistic : Average
        threshold : 10
        unit : Milliseconds


.. _Instances:

**Instances**
===============

The AWS::EC2::Instance type creates an Amazon EC2 Instance.

JSON syntax for the resource Instances.

.. code-block:: javascript

   "Type" : "AWS::EC2::Instance",
   "Properties" : {
      "AvailabilityZone" : String,
      "BlockDeviceMappings" : [ EC2 Block Device Mapping, ... ],
      "DisableApiTermination" : Boolean,
      "EbsOptimized" : Boolean,
      "IamInstanceProfile" : String,
      "ImageId" : String,
      "InstanceInitiatedShutdownBehavior" : String,
      "InstanceType" : String,
      "KernelId" : String,
      "KeyName" : String,
      "Monitoring" : Boolean,
      "NetworkInterfaces" : [ EC2 Network Interface, ... ],
      "PlacementGroupName" : String,
      "PrivateIpAddress" : String,
      "RamdiskId" : String,
      "SecurityGroupIds" : [ String, ... ],
      "SecurityGroups" : [ String, ... ],
      "SourceDestCheck" : Boolean,
      "SubnetId" : String,
      "Tags" : [ Resource Tag, ... ],
      "Tenancy" : String,
      "UserData" : String,
      "Volumes" : [ EC2 MountPoint, ... ],
      "AdditionalInfo" : String
   }


Sample YAML syntax for the resource Instances.

.. code-block:: yaml

    instances:
      *InstanceName*:
        hostname: SampleHostname
        instance_type: m3.xlarge
        ami_id: ami-xxxxxxxx
        ebs_optimized: true
        iam_role: SampleIAMRole
        security_groups:
          - sg-00000001
          - sg-00000002
        ramdisk_id: SampleRamDiskID
        source_dest_check: true
        network_interfaces:
          Interface1:
            public_ip: true
            delete_on_termination: true
            device_index: 0
            subnet_id: subnet-xxxxxxxx
            private_ips:
              - private_ip: 1.1.1.1
                primary: false
              - private_ip: 2.2.2.2
                primary: true
        block_devices:
          /dev/sda:
            ebs:
              delete_on_termination: false
              encrypted: false
              iops: 1000
              size: 100
              type: standard
          /dev/sdb:
            ebs:
              snapshot_id: snap-xxxxxxxx
          /dev/sdc:
            virtual_name: ephemeral0
          /dev/sdd:
            no_device: true
        volumes:
          - device: ref(SampleVolume1)
            volume_id: /dev/sdd
          - device: vol-xxxxxxx
            volume_id: /dev/sde
        tags:
          - key: Key1
            value: Value1
        user_data:
          file: path/to/script.sh  # Jinja2 Template
          params:
            param1: hello
            param2: world


.. _Launch Configuration:

**Launch Configuration**
==========================

The AWS::AutoScaling::LaunchConfiguration type creates an Auto Scaling Launch Configuration that can be used by an Auto Scaling Group to configure Amazon EC2 Instances in the Auto Scaling Group.

JSON Syntax for Launch Configuration.

.. code-block:: javascript


   "Type" : "AWS::AutoScaling::LaunchConfiguration",
   "Properties" : {
      "AssociatePublicIpAddress" : Boolean,
      "BlockDeviceMappings" : [ BlockDeviceMapping, ... ],
      "ClassicLinkVPCId" : String,
      "ClassicLinkVPCSecurityGroups" : [ String, ... ],
      "EbsOptimized" : Boolean,
      "IamInstanceProfile" : String,
      "ImageId" : String,
      "InstanceId" : String,
      "InstanceMonitoring" : Boolean,
      "InstanceType" : String,
      "KernelId" : String,
      "KeyName" : String,
      "PlacementTenancy" : String,
      "RamDiskId" : String,
      "SecurityGroups" : [ SecurityGroup, ... ],
      "SpotPrice" : String,
      "UserData" : String
   }


YAML Syntax for Launch Configuration.

.. code-block:: yaml


    launch_configurations:
         *LaunchConfigurationName*:
              instance_type: t2.small
              ebs_optimized: false
              ami_id: ami-xxxxxxxx
              iam_role: SampleIAMRole
              key_pair: SampleKey
              ramdisk_id: SampleRamDiskID
              public_ip: true
              security_groups:
                - sg-00000001
                - sg-00000002
              block_devices:
                /dev/sda:
                  ebs:
                    delete_on_termination: false
                    encrypted: false
                    iops: 1000
                    size: 100
                    type: standard
                /dev/sdb:
                  ebs:
                    snapshot_id: id-testSnapshot
                /dev/sdc:
                  virtual_name: ephemeral0
                /dev/sdd:
                  no_device: true
              user_data:
                  file: path/to/script.sh  # Jinja2 Template
                  params:
                    param1: hello
                    param2: world


.. _Lifecycle Hooks:

**Lifecycle Hooks**
====================

Use AWS::AutoScaling::LifecycleHook to control the state of an instance in an Auto Scaling group after it is launched or terminated. When you use a lifecycle hook, the Auto Scaling group either pauses the instance after it is launched (before it is put into service) or pauses the instance as it is terminated (before it is fully terminated).

.. code-block:: javascript

        {
        "Type" : "AWS::AutoScaling::LifecycleHook",
        "Properties" :
        {
        "AutoScalingGroupName" : String,
        "DefaultResult" : String,
        "HeartbeatTimeout" : Integer,
        "LifecycleTransition" : String,
        "NotificationMetadata" : String,
        "NotificationTargetARN" : String,
        "RoleARN" : String
        }
        }

.. code-block:: yaml

        lifecycle_hooks:
            testLifecycleHook:
                asg_name: ref(djinIntWeb)
                lifecycle_transition: autoscaling:EC2_INSTANCE_TERMINATING
                notification_target_arn: ref(testName) # SNS Topic
                role_arn: ref(someIAMRole)
                heartbeat_timeout: 1800
                default_result: CONTINUE
                notification_metadata: test_metadata

.. _Load Balancer:

**Load Balancer**
===================

The AWS::ElasticLoadBalancing::LoadBalancer type creates a LoadBalancer.
If this resource has a public IP address and is also in a VPC that is defined in the same template, you must use the DependsOn attribute to declare a dependency on the VPC-gateway attachment.

The syntax for load balancer keywords in yaml for any of the above category is defined below.

JSON Syntax for load balancer resource.

.. code-block:: javascript

   "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
   "Properties": {
      "AccessLoggingPolicy" : AccessLoggingPolicy,
      "AppCookieStickinessPolicy" : [ AppCookieStickinessPolicy, ... ],
      "AvailabilityZones" : [ String, ... ],
      "ConnectionDrainingPolicy" : ConnectionDrainingPolicy,
      "ConnectionSettings" : ConnectionSettings,
      "CrossZone" : Boolean,
      "HealthCheck" : HealthCheck,
      "Instances" : [ String, ... ],
      "LBCookieStickinessPolicy" : [ LBCookieStickinessPolicy, ... ],
      "LoadBalancerName" : String,
      "Listeners" : [ Listener, ... ],
      "Policies" : [ ElasticLoadBalancing Policy, ... ],
      "Scheme" : String,
      "SecurityGroups" : [ Security Group, ... ],
      "Subnets" : [ String, ... ],
      "Tags" : [ Resource Tag, ... ]
   }


YAML Syntax for load balancer resource.

.. code-block:: yaml


    load_balancers:
        *LoadBalancerName*:
            scheme: internet-facing
            connection_settings:
              idle_timeout: 40
            cross_zone: True
            security_group:
              - sg-12e0f276
              - sg-12340234
            service_name: *service
            instances:
              - 10.23.23.23
              - 13.12.13.14
            policies:
               - policy_name: policy_name
                 attribute:
                    - name: name1
                      value: value1
                    - name: name2
                      value: value2
                 instance_ports:
                    - 2121
                    - 2424
                 load_balancer_ports:
                    - 32323
                    - 2424
                 policy_type: SSLNegotiationPolicyType
               - policy_name: policy_name1
                 attribute:
                    - name: value1
                      value: value2
                 instance_ports:
                    - 2121
                    - 2424
                 load_balancer_ports:
                    - 32323
                    - 2424
            realm: protected
            app_cookie_stickiness_policy:
              - policy_name: policy_name1
                cookie_name: cookie_name1
              - policy_name: policy_name2
                cookie_name: cookie_name2
            connection_draining_policy:
              enabled: True
              timeout: 10
            availability_zones:
              - "Fn::GetAZs": ""
            health_check:
              healthy_threshold: String
              interval: String
              target: String
              timeout: String
              unhealthy_threshold: String
            lb_cookie_stickiness_policy:
              - policy_name: policy_name1
                cookie_expiration_period: String
              - policy_name: policy_name2
                cookie_expiration_period: String
            load_balancer_name: unique_name
            access_logging_policy:
              emit_interval: 20
              enabled: True
              s3_bucket_name: s3_bucket_name1
              s3_bucket_prefix: s3_bucket_prefix1
            listeners:
              https:
                load_balancer_port: 83
                instance_port: 84
                instance_protocol: tcp
              tcp:
                load_balancer_port: 8443
                instance_port: 8443
                instance_protocol: http
                ssl_certificate_id: arn:aws:iam::534664863199:server-certificate/djin-fcm.fint.dowjones.net
            tags:
              - key: key1
                value: value1
              - key: key2
                value: value2

.. _Network Interface:

**Network Interface**
========================

Describes a network interface in an Elastic Compute Cloud (EC2) instance for AWS CloudFormation. This is provided in a list in the NetworkInterfaces property of AWS::EC2::Instance.

JSON Syntax for network interface.

.. code-block:: javascript

   "Type" : "AWS::EC2::NetworkInterface",
   "Properties" : {
      "Description" : String,
      "GroupSet" : [ String, ... ],
      "PrivateIpAddress" : String,
      "PrivateIpAddresses" : [ PrivateIpAddressSpecification, ... ],
      "SecondaryPrivateIpAddressCount" : Integer,
      "SourceDestCheck" : Boolean,
      "SubnetId" : String,
      "Tags" : [ Resource Tag, ... ],
   }


YAML Syntax for network interface.

.. code-block:: yaml


    network_interface:
      *networkInterfaceName*:
        description: sample description
        group_set:
          - sampleGroup1
          - sampleGroup2
        private_ip_address: 10.20.03.20
        private_ip_addresses:
         - 10.23.23.23
         - 12.13.3.4
        secondary_private_ip_address_count: 4
        source_dest_check: true
        subnet_id: 131.3.13.1
        tags:
            - key: testTag1
              value: testTagValue1
            - key: testTag2
              value: testTagValue2


.. _Network Interface Attachment:

**Network Interface Attachment**
==================================

Respawn supports [network interface attachment](http://docs.aws.amazon
.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface-attachment.html) for autoscaling/EC2 boxes.
Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instances without interruption.

JSON Syntax for network interface attachment.

.. code-block:: javascript

   "Type" : "AWS::EC2::NetworkInterfaceAttachment",
   "Properties" : {
      "DeleteOnTermination": Boolean,
      "DeviceIndex": String,
      "InstanceId": String,
      "NetworkInterfaceId": String,
   }

YAML Syntax for network interface attachment.

.. code-block:: yaml

   network_interface_attachment:
      *networkInterfaceAttachName*:
         delete_on_termination: False
         device_index: 1
         instance_id: sampleId
         network_interface_id: *networkInterfaceIdName


where
- device_index = The network interface's position in the attachment order. For example, the first attached network
interface has a DeviceIndex of 0.
- instance_id = The reference to the name of the AutoScalingGroup or EC2 box.
- network_interface_id = The reference of the ENI that you want to attach.
- delete_on_termination(**optional**) = Whether to delete the network interface when the instance terminates. By
default, this value is set to True.


.. _RDS:

**RDS**
============


.. code-block:: javascript

      "Properties": {
        "DBParameterGroupName": "string",
        "AllowMajorVersionUpgrade": true,
        "MasterUsername": "string",
        "LicenseModel": "string",
        "VPCSecurityGroups": [
          "string"
        ],
        "Engine": "string",
        "MultiAZ": false,
        "DBSecurityGroups": "string",
        "PubliclyAccessible": false,
        "Tags": [
          {
            "Key": "service_name",
            "Value": "djin/metadata/test/rds"
          }
        ],
        "PreferredBackupWindow": "string",
        "DBSnapshotIdentifier": "string",
        "AllocatedStorage": "string",
        "DBSubnetGroupName": "string",
        "DBName": "string",
        "PreferredMaintenanceWindow": "string",
        "EngineVersion": "string",
        "SourceDBInstanceIdentifier": "string",
        "BackupRetentionPeriod": "string",
        "OptionGroupName": "string",
        "CharacterSetName": "string",
        "AvailabilityZone": "string",
        "Iops": "string",
        "StorageEncrypted": true,
        "KmsKeyId": "string",
        "DBInstanceClass": "db.m1.small",
        "Port": "string",
        "DBInstanceIdentifier": "string"
      },

      "Instances1DNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Ref": "Instances1DNSZone"
        },
        "RecordSets": [
          {
            "ResourceRecords": [
              {
                "Fn::GetAtt": [
                  "myTestRDS",
                  "realm"
                ]
              }
            ],
            "Type": "CNAME",
            "Name": {
              "Fn::If": [
                "Instances1DNSNameUseStackName",
                {
                  "Fn::Join": [
                    ".",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      {
                        "Ref": "Instances1DNSZone"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ".",
                    [
                      {
                        "Ref": "Instances1DNSName"
                      },
                      {
                        "Ref": "Instances1DNSZone"
                      }
                    ]
                  ]
                }
              ]
            },
            "TTL": {
              "Ref": "Instances1DNSTimeToLive"
            }
          }
        ]
      }


.. code-block:: yaml

    rds:
      *rdsName*:
        realm: private
        service_name: sampleServiceName
        allocated_storage: 100
        instance_class: db.m1.small
        engine: MySQL
        allow_major_version_upgrade: True
        allow_minor_version_upgrade: True
        availability_zone: string
        backup_retention_period: string
        character_set_name: string
        instance_identifier: string
        db_name: string
        db_parameter_group_name: string
        db_security_groups: string
        snapshot_identifier: string
        subnet_group_name: string
        engine: string
        engine_version: string
        iops: 1000
        kms_key_id: string
        license_model: string
        master_username: string
        multi_az: False
        option_group_name: string
        port: string
        preferred_backup_window: string
        preferred_maintenance_window: string
        publicly_accessible: False
        source_db_instance_identifier: string
        storage_encrypted: True
        vpc_security_groups:
        - string


.. _Scheduled Action:

**Scheduled Action**
=======================

Creates a scheduled scaling action for an Auto Scaling group, changing the number of servers available for your application in response to predictable load changes.

JSON Syntax for scheduled action.

.. code-block:: javascript

  "Type" : "AWS::AutoScaling::ScheduledAction",
  "Properties" : {
    "AutoScalingGroupName" : String,
    "DesiredCapacity" : Integer,
    "EndTime" : Time stamp,
    "MaxSize" : Integer,
    "MinSize" : Integer,
    "Recurrence" : String,
    "StartTime" : Time stamp
  }

YAML Syntax for scheduled action.

.. code-block:: yaml

    scheduled_actions:
      djinIntWebActionDown:
          asg_name: sampleAsgName1
          desired_capacity: 0
          max_size: 0
          min_size: 0
          recurrence: 0 7 * * *

      djinIntWebActionUp:
          asg_name: sampleAsgName2
          desired_capacity: 10
          max_size: 10
          min_size: 10
          recurrence: 0 9 * * *


.. _Sns Topic:

**Sns Topic**
================

The AWS::SNS::Topic type creates an Amazon SNS topic. Respawn supports [SnsTopics](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html) to be hooked into yaml. The keywords to add SnS Topic resource are shown in the following example template:

JSON Syntax for SNS topic.

.. code-block:: javascript

  "Type" : "AWS::SNS::Topic",
  "Properties" : {
    "DisplayName" : String,
    "Subscription" : [ SNS Subscription, ... ],
    "TopicName" : String
  }

YAML Syntax for SNS topic.

.. code-block:: yaml

  sns_topic:
      *snsTopicName*:
        display_name : MySnSTopic
        topic_name : SampleTopic
        subscription:
          - protocol : https
            endpoint : OpsGenieEndpoint
          - protocol : http
            endpoint : htps://sample.com


where
- display_name = A developer-defined string that can be used to identify this SNS topic.
- topic_name = A name for the topic. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the topic name.
- protocol = The protocol to be used.
- endpoint = The SNS subscriptions (endpoints) for this topic. This should be a reference (parameter).

.. _Volume:

**Volume**
=============

The AWS::EC2::Volume type creates a new Amazon Elastic Block Store volume.
You can set a deletion policy for your volume to control how AWS CloudFormation handles the volume when the stack is deleted.

JSON Syntax for volume resource.

.. code-block:: javascript

   "Type":"AWS::EC2::Volume",
   "Properties" : {
      "AvailabilityZone" : String,
      "Encrypted" : Boolean,
      "Iops" : Number,
      "KmsKeyId" : String,
      "Size" : String,
      "SnapshotId" : String,
      "Tags" : [ Resource Tag, ... ],
      "VolumeType" : String
   }

YAML Syntax for volume resource.

.. code-block:: yaml

    volumes:
        *Volume1Name:
          availability_zone: testAZ
          instance: testInstance
          size: 100

        Volume2Name:
          availability_zone: testAZ
          snapshot_id: testSnapshotID
          size: 1000
          iops: 4000
          kms_key_id: testKMSKey
          volume_type: standard
          encrypted: true
          tags:
            - key: testTag2
              value: testTagValue2
          deletion_policy: Retain


.. _Other Required Keywords:

**Other Required Keywords**
==============================

Properties:

.. code-block:: yaml

    stack_name: sampleStackName
    environment: int
    default_windows_ami: &win_ami sampleAmi
    multi_az: True
    eap: &eap no
    ebs_optimized: &ebs_optimized false
    periodic_Chef: false
    service_name: &service sampleServiceName


**Parameter Index**
#########################

* `Parameters`_

.. _Parameters:

**Parameters**
=================

Respawn supports string, integer and boolean parameters only at this point. #todo
Here is a sample yaml for parameter creation in cloudformation through respawn. This yaml will generate two parameters
named Parameter1Name and Parameter2Name.

Properties:


.. code-block:: yaml


    parameters:
      *Parameter1Name*:
        default: 10.201.22.33
        type: String
        description: "write description here"
        allowed_values:
            - 10.201.22.34
            - 10.201.22.35
        allowed_pattern: [A-Za-z0-9]+
        no_echo: true
        max_length: 23
        min_length: 12
        max_value: 34
        min_value: 12
        constraint_description: "Parameter must only contain upper and lower case letters"
      *Parameter2Name*:
        default : 10.201.22.32
        type : String
        description : write description here


**UserData Index**
#########################

* `UserData`_

**UserData**
=================

Base64-encoded MIME user-data that is made available to the instances.You can add this keyword to Instance resource.

Update requires:

Update requires: Some interruptions for Amazon EBS-backed instances.
NoteFor EBS-backed instances, changing the UserData stops and then starts the instance; however, Amazon EC2 doesn't automatically run the updated UserData. To update configurations on your instance, use the cfn-hup helper script.

.. code-block:: javascript

    {
   "Type" : "AWS::EC2::Instance",
   "Properties" : {
      "UserData" : String
   }


.. code-block:: yaml

    user_data:
          file: file.sh #absolute/relative path to your use data file.
          params:
            param1: hello
            param2: world


**References Index**
#########################

* `Reference`_
* `Get_Attribute`_

**Reference**
===============

When you specify a keyword type as an argument to the Ref function, AWS CloudFormation returns the value of the
parameter.

For more information about using the Ref function, see `Ref <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html>`_ .

.. code-block:: javascript

    {
    "Dimensions": [
          {
            "Name": "Metric dimension",
            "Value": 123
          },
          {
            "Name": "name2",
            "Value": {
              "Ref": "test_name"
            }
          },
          {
            "Name": "name3",
            "Value": "test_value"
          }
        ]
    }

.. code-block:: yaml

    dimensions :
      - name : Metric dimension
        value : 123
      - name: name2
        value: ref(test_name)

**Get_Attribute**
==================

.. code-block:: yaml

    dimensions :
      - name : Metric dimension
        value : 123
      - name: name2
        value: get_att(resourceName, test_name)